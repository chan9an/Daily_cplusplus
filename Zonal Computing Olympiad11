#include <bits/stdc++.h>

using namespace std;

int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    
    int n,x,y;
    cin>>n>>x>>y;
    vector<pair<int,int>> v(n);
    for(int i = 0; i < n; i++){
        cin>>v[i].first>>v[i].second;
    }
    set<int> vWormHole, wWormHole; // sets are sorted, no need to sort them for upper_bound, lower_bound
    for(int i = 0; i < x; i++){
        int x;
        cin>>x;
        vWormHole.insert(x);
    }
    for(int i = 0; i < y; i++){
        int x;
        cin>>x;
        wWormHole.insert(x);
    }
    int ans = INT_MAX; // taking min so initialized it with INT_MAX so the ans value doesnt come
    for(int i = 0; i < n; i++){
        int t1, t2;
        auto itr = vWormHole.upper_bound(v[i].first);
    //  if itr points to the first element of the set we cant do itr-- because it will go out of the set so checked if itr != vWormHole.begin()
        if(itr!=vWormHole.begin()){
    /*      upper_bound will always return you the just higher element but we have to get to the
            contest before it starts or when it just starts so we have to do itr--  */
            itr--;
            t1 = *itr;
        }else{
            continue; // skip this contest as no wormhole can be used to reach before the contest
        }
        // we have to find return time so we are ok if the time is same as the time when contest ends or after some time when the contest ends
        itr = wWormHole.lower_bound(v[i].second);
        if(itr!=wWormHole.end()){
            t2 = *itr;
        }else{
            continue; // didnt find a timing
        }
        ans = min(ans,(t2-t1)+1);
    }
    cout<<ans;
    return 0;
}
